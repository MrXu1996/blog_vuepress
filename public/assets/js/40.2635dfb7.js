(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{563:function(e,t,r){"use strict";r.r(t);var o=r(5),s=Object(o.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"vue的双向数据绑定原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#vue的双向数据绑定原理"}},[e._v("#")]),e._v(" vue的双向数据绑定原理")]),e._v(" "),r("blockquote",[r("p",[e._v("分析 :此题考查 Vue的MVVM原理")]),e._v(" "),r("p",[r("strong",[r("code",[e._v("解答")])]),e._v(":  Vue的双向绑定原理其实就是MVVM的实现原理, Vuejs官网已经说明, 实际就是通过 Object.defineProperty方法 完成了对于Vue实例中数据的 "),r("strong",[r("code",[e._v("劫持")])]),e._v(", 通过对于 data中数据 set的监听,")]),e._v(" "),r("p",[e._v("然后通过**"),r("code",[e._v("观察者模式")]),e._v("**, 通知 对应的绑定节点 进行节点数据更新, 完成数据驱动视图的更新")]),e._v(" "),r("p",[e._v("同理, 通过对于节点的表单值改变事件的监听,  执行对于数据的修改")])]),e._v(" "),r("p",[e._v("简单概述 : 通过Object.defineProperty 完成对于数据的劫持, 通过观察者模式, 完成对于节点的数据更新")])])}),[],!1,null,null,null);t.default=s.exports}}]);